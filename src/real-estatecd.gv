// Code generated by Umple 1.31.1.5860.78bb27cc6

digraph "real-estate" {
  rankdir="BT"
  node [ratio="auto" shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];

  // Class: Address
  "Address" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Address    </td></tr><hr/><tr><td align="left" href="" title="Integer numberOnStreet&#13;">  numberOnStreet : Integer  </td></tr><tr><td align="left" href="" title="Integer apartmentOrUnit&#13;">  apartmentOrUnit : Integer  </td></tr><tr><td align="left" href="" title="String street&#13;">  street : String  </td></tr><tr><td align="left" href="" title="String city&#13;">  city : String  </td></tr><tr><td align="left" href="" title="String postalCode&#13;">  postalCode : String  </td></tr></table>>,
   tooltip="class Address
"];

  // Class: GPSCoord
  "GPSCoord" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    GPSCoord    </td></tr><hr/><tr><td align="left" href="" title="Double lattitude&#13;">  lattitude : Double  </td></tr><tr><td align="left" href="" title="Double longitude&#13;">  longitude : Double  </td></tr></table>>,
   tooltip="class GPSCoord
"];

  // Class: Property
  "Property" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Property    </td></tr><hr/><tr><td align="left" href="" title="Address propertyAddress&#13;">  propertyAddress : Address  </td></tr><tr><td align="left" href="" title="Integer numberBedrooms&#13;">  numberBedrooms : Integer  </td></tr><tr><td align="left" href="" title="Integer numberBathrooms&#13;">  numberBathrooms : Integer  </td></tr><tr><td align="left" href="" title="Integer squareFeet&#13;">  squareFeet : Integer  </td></tr><tr><td align="left" href="" title="Integer numFloors&#13;">  numFloors : Integer  </td></tr><tr><td align="left" href="" title="GPSCoord gpsCoord&#13;">  gpsCoord : GPSCoord  </td></tr></table>>,
   tooltip="class Property
"];

  // Class: Neighbourhood
  "Neighbourhood" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Neighbourhood    </td></tr><hr/><tr><td align="left" href="" title="String description&#13;">  description : String  </td></tr><tr><td align="left" href="" title="GPSCoord[] gpsCoordsOfBoundary&#13;">  gpsCoordsOfBoundary : GPSCoord[]  </td></tr></table>>,
   tooltip="class Neighbourhood
"];

  // Class: PropertySale
  "PropertySale" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PropertySale    </td></tr><hr/><tr><td align="left" href="" title="Integer salePrice&#13;">  salePrice : Integer  </td></tr><tr><td align="left" href="" title="String seller&#13;">  seller : String  </td></tr><tr><td align="left" href="" title="String buyer&#13;">  buyer : String  </td></tr></table>>,
   tooltip="class PropertySale
"];

  // Class: OpenHouse
  "OpenHouse" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    OpenHouse    </td></tr><hr/><tr><td align="left" href="" title="String note&#13;">  note : String  </td></tr><tr><td align="left" href="" title="Date date&#13;">  date : Date  </td></tr><tr><td align="left" href="" title="Time startTime&#13;">  startTime : Time  </td></tr><tr><td align="left" href="" title="Time endTime&#13;">  endTime : Time  </td></tr></table>>,
   tooltip="class OpenHouse
"];

  // Class: Agent
  "Agent" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Agent    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String licenseNumber&#13;">  licenseNumber : String  </td></tr><tr><td align="left" href="" title="String emailAddress&#13;">  emailAddress : String  </td></tr><tr><td align="left" href="" title="String officePhoneNumber&#13;">  officePhoneNumber : String  </td></tr><tr><td align="left" href="" title="String cellPhoneNumber&#13;">  cellPhoneNumber : String  </td></tr><tr><td align="left" href="" title="Address officeAddress&#13;">  officeAddress : Address  </td></tr></table>>,
   tooltip="class Agent
"];

  // Class: PropertyForSale
  "PropertyForSale" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PropertyForSale    </td></tr><hr/><tr><td align="left" href="" title="Integer listingNumber&#13;">  listingNumber : Integer  </td></tr><tr><td align="left" href="" title="Integer askingPrice&#13;">  askingPrice : Integer  </td></tr><tr><td align="left" href="" title="Date dateListedForSale&#13;">  dateListedForSale : Date  </td></tr></table>>,
   tooltip="class PropertyForSale
"];

  // All associations
  "Property" -> "Neighbourhood" [dir="none", taillabel="* ", headlabel="1 ", tooltip="Property *  -- 1  Neighbourhood

A Neighbourhood has some Propertys called properties. It can have none, and there is no upper bound defined.

A Property called properties has A Neighbourhood. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Neighbourhood.

When a Property is created, its Neighbourhood must be assigned.
When a Property is deleted, its Neighbourhood is not deleted and its list of Propertys is decreased.
When a Neighbourhood is deleted, its Propertys are not deleted. They are assigned to another Neighbourhood.
" headtooltip="Property *  -- 1  Neighbourhood

A Neighbourhood has some Propertys called properties. It can have none, and there is no upper bound defined.

A Property called properties has A Neighbourhood. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Neighbourhood.

When a Property is created, its Neighbourhood must be assigned.
When a Property is deleted, its Neighbourhood is not deleted and its list of Propertys is decreased.
When a Neighbourhood is deleted, its Propertys are not deleted. They are assigned to another Neighbourhood.
" tailtooltip="Property *  -- 1  Neighbourhood

A Neighbourhood has some Propertys called properties. It can have none, and there is no upper bound defined.

A Property called properties has A Neighbourhood. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Neighbourhood.

When a Property is created, its Neighbourhood must be assigned.
When a Property is deleted, its Neighbourhood is not deleted and its list of Propertys is decreased.
When a Neighbourhood is deleted, its Propertys are not deleted. They are assigned to another Neighbourhood.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "PropertySale" -> "Property" [dir="none", taillabel="* ", headlabel="1 ", tooltip="PropertySale *  -- 1  Property

A Property has some PropertySales. It can have none, and there is no upper bound defined.

A PropertySale has A Property. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Property.

When a PropertySale is created, its Property must be assigned.
When a PropertySale is deleted, its Property is not deleted and its list of PropertySales is decreased.
When a Property is deleted, its PropertySales are not deleted. They are assigned to another Property.
" headtooltip="PropertySale *  -- 1  Property

A Property has some PropertySales. It can have none, and there is no upper bound defined.

A PropertySale has A Property. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Property.

When a PropertySale is created, its Property must be assigned.
When a PropertySale is deleted, its Property is not deleted and its list of PropertySales is decreased.
When a Property is deleted, its PropertySales are not deleted. They are assigned to another Property.
" tailtooltip="PropertySale *  -- 1  Property

A Property has some PropertySales. It can have none, and there is no upper bound defined.

A PropertySale has A Property. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Property.

When a PropertySale is created, its Property must be assigned.
When a PropertySale is deleted, its Property is not deleted and its list of PropertySales is decreased.
When a Property is deleted, its PropertySales are not deleted. They are assigned to another Property.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "OpenHouse" -> "PropertyForSale" [dir="none", taillabel="* ", headlabel="1 ", tooltip="OpenHouse *  -- 1  PropertyForSale

A PropertyForSale has some OpenHouses. It can have none, and there is no upper bound defined.

An OpenHouse has A PropertyForSale. It must always have exactly, one, and can never have none. And there is an upper bound of at most one PropertyForSale.

When an OpenHouse is created, its PropertyForSale must be assigned.
When an OpenHouse is deleted, its PropertyForSale is not deleted and its list of OpenHouses is decreased.
When a PropertyForSale is deleted, its OpenHouses are not deleted. They are assigned to another PropertyForSale.
" headtooltip="OpenHouse *  -- 1  PropertyForSale

A PropertyForSale has some OpenHouses. It can have none, and there is no upper bound defined.

An OpenHouse has A PropertyForSale. It must always have exactly, one, and can never have none. And there is an upper bound of at most one PropertyForSale.

When an OpenHouse is created, its PropertyForSale must be assigned.
When an OpenHouse is deleted, its PropertyForSale is not deleted and its list of OpenHouses is decreased.
When a PropertyForSale is deleted, its OpenHouses are not deleted. They are assigned to another PropertyForSale.
" tailtooltip="OpenHouse *  -- 1  PropertyForSale

A PropertyForSale has some OpenHouses. It can have none, and there is no upper bound defined.

An OpenHouse has A PropertyForSale. It must always have exactly, one, and can never have none. And there is an upper bound of at most one PropertyForSale.

When an OpenHouse is created, its PropertyForSale must be assigned.
When an OpenHouse is deleted, its PropertyForSale is not deleted and its list of OpenHouses is decreased.
When a PropertyForSale is deleted, its OpenHouses are not deleted. They are assigned to another PropertyForSale.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "OpenHouse" -> "Agent" [dir="none", taillabel="* ", headlabel="0..1 agentInCharge", tooltip="OpenHouse *  -- 0..1 agentInCharge Agent

An Agent called agentInCharge has some OpenHouses. It can have none, and there is no upper bound defined.

An OpenHouse may have an Agent called agentInCharge. It can have none or just 1. 

" headtooltip="OpenHouse *  -- 0..1 agentInCharge Agent

An Agent called agentInCharge has some OpenHouses. It can have none, and there is no upper bound defined.

An OpenHouse may have an Agent called agentInCharge. It can have none or just 1. 

" tailtooltip="OpenHouse *  -- 0..1 agentInCharge Agent

An Agent called agentInCharge has some OpenHouses. It can have none, and there is no upper bound defined.

An OpenHouse may have an Agent called agentInCharge. It can have none or just 1. 

" tailurl="javascript:void()" headurl="javascript:void()" ];
  "Agent" -> "Neighbourhood" [dir="none", taillabel="* ", headlabel="* specializingNeighbourhoods", tooltip="Agent *  -- * specializingNeighbourhoods Neighbourhood

A Neighbourhood called specializingNeighbourhoods has some Agents. It can have none, and there is no upper bound defined.

An Agent has some Neighbourhoods called specializingNeighbourhoods. It can have none, and there is no upper bound defined.

" headtooltip="Agent *  -- * specializingNeighbourhoods Neighbourhood

A Neighbourhood called specializingNeighbourhoods has some Agents. It can have none, and there is no upper bound defined.

An Agent has some Neighbourhoods called specializingNeighbourhoods. It can have none, and there is no upper bound defined.

" tailtooltip="Agent *  -- * specializingNeighbourhoods Neighbourhood

A Neighbourhood called specializingNeighbourhoods has some Agents. It can have none, and there is no upper bound defined.

An Agent has some Neighbourhoods called specializingNeighbourhoods. It can have none, and there is no upper bound defined.

" tailurl="javascript:void()" headurl="javascript:void()" ];
  "PropertyForSale" -> "Property" [dir="none", taillabel="* ", headlabel="1 listedProperty", tooltip="PropertyForSale *  -- 1 listedProperty Property

A Property called listedProperty has some PropertyForSales. It can have none, and there is no upper bound defined.

A PropertyForSale has A Property called listedProperty. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Property called listedProperty.

When a PropertyForSale is created, its Property must be assigned.
When a PropertyForSale is deleted, its Property is not deleted and its list of PropertyForSales is decreased.
When a Property is deleted, its PropertyForSales are not deleted. They are assigned to another Property.
" headtooltip="PropertyForSale *  -- 1 listedProperty Property

A Property called listedProperty has some PropertyForSales. It can have none, and there is no upper bound defined.

A PropertyForSale has A Property called listedProperty. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Property called listedProperty.

When a PropertyForSale is created, its Property must be assigned.
When a PropertyForSale is deleted, its Property is not deleted and its list of PropertyForSales is decreased.
When a Property is deleted, its PropertyForSales are not deleted. They are assigned to another Property.
" tailtooltip="PropertyForSale *  -- 1 listedProperty Property

A Property called listedProperty has some PropertyForSales. It can have none, and there is no upper bound defined.

A PropertyForSale has A Property called listedProperty. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Property called listedProperty.

When a PropertyForSale is created, its Property must be assigned.
When a PropertyForSale is deleted, its Property is not deleted and its list of PropertyForSales is decreased.
When a Property is deleted, its PropertyForSales are not deleted. They are assigned to another Property.
" tailurl="javascript:void()" headurl="javascript:void()" ];
  "PropertyForSale" -> "Agent" [dir="none", taillabel="* ", headlabel="0..1 listingAgent", tooltip="PropertyForSale *  -- 0..1 listingAgent Agent

An Agent called listingAgent has some PropertyForSales. It can have none, and there is no upper bound defined.

A PropertyForSale may have an Agent called listingAgent. It can have none or just 1. 

" headtooltip="PropertyForSale *  -- 0..1 listingAgent Agent

An Agent called listingAgent has some PropertyForSales. It can have none, and there is no upper bound defined.

A PropertyForSale may have an Agent called listingAgent. It can have none or just 1. 

" tailtooltip="PropertyForSale *  -- 0..1 listingAgent Agent

An Agent called listingAgent has some PropertyForSales. It can have none, and there is no upper bound defined.

A PropertyForSale may have an Agent called listingAgent. It can have none or just 1. 

" tailurl="javascript:void()" headurl="javascript:void()" ];
  "PropertyForSale" -> "PropertySale" [dir="none", taillabel="0..1 ", headlabel="0..1 ", tooltip="PropertyForSale 0..1  -- 0..1  PropertySale

A PropertySale may have a PropertyForSale. It can have none or just 1. 

A PropertyForSale may have a PropertySale. It can have none or just 1. 

" headtooltip="PropertyForSale 0..1  -- 0..1  PropertySale

A PropertySale may have a PropertyForSale. It can have none or just 1. 

A PropertyForSale may have a PropertySale. It can have none or just 1. 

" tailtooltip="PropertyForSale 0..1  -- 0..1  PropertySale

A PropertySale may have a PropertyForSale. It can have none or just 1. 

A PropertyForSale may have a PropertySale. It can have none or just 1. 

" tailurl="javascript:void()" headurl="javascript:void()" ];
}
